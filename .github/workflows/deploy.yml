# name: Deploy Node.js + Redis on EC2 with Docker

# on:
#     push:
#         branches:
#             - main

# jobs:
#     build-and-deploy:
#         runs-on: ubuntu-latest

#         steps:
#             - uses: actions/checkout@v3

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2

#             - name: Log in to DockerHub
#               uses: docker/login-action@v2
#               with:
#                   username: ${{ secrets.DOCKERHUB_USERNAME }}
#                   password: ${{ secrets.DOCKERHUB_TOKEN }}

#             - name: Build and push Docker image
#               run: |
#                   docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest .
#                   docker push ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest

#             - name: Deploy to EC2
#               env:
#                   SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#                   EC2_USER: ${{ secrets.EC2_USER }}
#                   EC2_HOST: ${{ secrets.EC2_HOST }}
#                   ENV_VARS_JSON: ${{ secrets.ENV_VARS_JSON }}
#               run: |
#                   mkdir -p ~/.ssh
#                   echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#                   chmod 600 ~/.ssh/id_rsa
#                   ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

#                   ssh $EC2_USER@$EC2_HOST "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest"
#                   ssh $EC2_USER@$EC2_HOST "sudo docker ps -q -f name=podcast-redis || sudo docker run -d --name podcast-redis -p 6379:6379 --restart unless-stopped redis:latest"
#                   ssh $EC2_USER@$EC2_HOST "sudo docker rm -f podcast-backend || true"
#                   ssh $EC2_USER@$EC2_HOST "sudo docker run -d --name podcast-backend -p 5000:5000 --env-file ~/applications/backend/.env ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest"

name: Deploy Node.js + Redis on EC2 with Docker

on:
    push:
        branches:
            - development

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              run: |
                  docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest .
                  docker push ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest

            - name: Deploy to EC2
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
                  EC2_USER: ${{ secrets.EC2_USER }}
                  EC2_HOST: ${{ secrets.EC2_HOST }}
              run: |
                  mkdir -p ~/.ssh
                  echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

                  # Pull latest backend image
                  ssh $EC2_USER@$EC2_HOST "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest"

                  # Create Docker network if it doesn't exist
                  ssh $EC2_USER@$EC2_HOST "sudo docker network inspect podcast-network || sudo docker network create podcast-network"

                  # Run Redis container if not running, attach to network
                  ssh $EC2_USER@$EC2_HOST "sudo docker ps -q -f name=podcast-redis || sudo docker run -d --name podcast-redis --network podcast-network -p 6379:6379 --restart unless-stopped redis:latest"

                  # Remove old backend container if exists
                  ssh $EC2_USER@$EC2_HOST "sudo docker rm -f podcast-backend || true"

                  # Run backend container on the same network
                  ssh $EC2_USER@$EC2_HOST "sudo docker run -d --name podcast-backend --network podcast-network -p 5000:5000 --env-file ~/applications/backend/.env ${{ secrets.DOCKERHUB_USERNAME }}/podcast-backend:latest"

# #With redis password authentication
# # name: Deploy Node.js + Redis on EC2 with Docker

# # on:
# #   push:
# #     branches:
# #       - main

# # jobs:
# #   build-and-deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - uses: actions/checkout@v3

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v2

# #       - name: Log in to DockerHub
# #         uses: docker/login-action@v2
# #         with:
# #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# #           password: ${{ secrets.DOCKERHUB_TOKEN }}

# #       - name: Build and push Docker image
# #         run: |
# #           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:latest .
# #           docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:latest

# #       - name: Deploy to EC2
# #         env:
# #           SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
# #           EC2_USER: ${{ secrets.EC2_USER }}
# #           EC2_HOST: ${{ secrets.EC2_HOST }}
# #           ENV_VARS_JSON: ${{ secrets.ENV_VARS_JSON }}
# #         run: |
# #           mkdir -p ~/.ssh
# #           echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
# #           chmod 600 ~/.ssh/id_rsa
# #           ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

# #           # Create backend app directory and write .env file
# #           ssh $EC2_USER@$EC2_HOST "mkdir -p ~/applications/backend"
# #           ssh $EC2_USER@$EC2_HOST "echo '$ENV_VARS_JSON' | jq -r 'to_entries | .[] | \"\(.key)=\(.value)\"' > ~/applications/backend/.env"

# #           # Ensure redis.conf exists on EC2 (you must upload this manually once or via separate step)
# #           # For example: requirepass YourStrongPasswordHere + optional config

# #           # Check if Redis container is running; if not, start with password config
# #           ssh $EC2_USER@$EC2_HOST "docker ps -q -f name=redis-prod || docker run -d --name redis-prod -p 6379:6379 --restart unless-stopped \
# #             -v ~/applications/backend/redis.conf:/usr/local/etc/redis/redis.conf \
# #             redis:latest redis-server /usr/local/etc/redis/redis.conf"

# #           # Remove old backend container if exists
# #           ssh $EC2_USER@$EC2_HOST "docker rm -f backend-app || true"

# #           # Run backend container with updated image and env file
# #           ssh $EC2_USER@$EC2_HOST "docker run -d --name backend-app -p 5090:5090 --env-file ~/applications/backend/.env ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:latest"
